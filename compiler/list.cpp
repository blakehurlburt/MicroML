//Autogenerated C++ Source Code DO NOT EDIT
#include <Arduino.h>
#include <runtime.h>

const Obj* contains(const Obj* param, Environment *env) {
	env->push();
	env->bind("tup", param);
	const Obj* ret = nullptr;
	ret = _or_(makeRecord({std::make_pair("_0", _and_(makeRecord({std::make_pair("_0", _ne_(makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_1", env)),std::make_pair("_1", makeRecord({}))}), env)),std::make_pair("_1", _eq_(makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_0", env)),std::make_pair("_1", _get_(_get_(env->lookup("tup"), "_1", env), "head", env))}), env))}), env)),std::make_pair("_1", invoke("contains", makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_0", env)),std::make_pair("_1", _get_(_get_(env->lookup("tup"), "_1", env), "tail", env))}), env))}), env);
	env->pop();
	return ret;
}
const Obj* push_front(const Obj* param, Environment *env) {
	env->push();
	env->bind("tup", param);
	const Obj* ret = nullptr;
	ret = makeRecord({std::make_pair("head", _get_(env->lookup("tup"), "_0", env)),std::make_pair("tail", _get_(env->lookup("tup"), "_1", env))});
	env->pop();
	return ret;
}
const Obj* lambda_2(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	if (unwrapBool(_eq_(makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_1", env)),std::make_pair("_1", makeRecord({}))}), env))) {
		ret = makeRecord({std::make_pair("head", _get_(env->lookup("tup"), "_0", env)),std::make_pair("tail", makeRecord({}))});
	} else {
		ret = makeRecord({std::make_pair("head", _get_(_get_(env->lookup("tup"), "_0", env), "head", env)),std::make_pair("tail", invoke("push_back", makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_0", env)),std::make_pair("_1", _get_(env->lookup("tup"), "_1_tail", env))}), env))});
	}
	env->pop();
	return ret;
}
const Obj* push_back(const Obj* param, Environment *env) {
	env->push();
	env->bind("tup", param);
	const Obj* ret = nullptr;
	ret = lambda_2(makeRecord({}), env);
	env->pop();
	return ret;
}
const Obj* lambda_4(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	if (unwrapBool(_eq_(makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_0", env)),std::make_pair("_1", _get_(_get_(env->lookup("tup"), "_1", env), "head", env))}), env))) {
		ret = _get_(_get_(env->lookup("tup"), "_1", env), "tail", env);
	} else {
		ret = makeRecord({std::make_pair("head", _get_(_get_(env->lookup("tup"), "_1", env), "head", env)),std::make_pair("tail", invoke("remove", makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_0", env)),std::make_pair("_1", _get_(_get_(env->lookup("tup"), "_1", env), "tail", env))}), env))});
	}
	env->pop();
	return ret;
}
const Obj* lambda_5(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	if (unwrapBool(_eq_(makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_1", env)),std::make_pair("_1", makeRecord({}))}), env))) {
		ret = makeRecord({});
	} else {
		ret = lambda_4(makeRecord({}), env);
	}
	env->pop();
	return ret;
}
const Obj* remove(const Obj* param, Environment *env) {
	env->push();
	env->bind("tup", param);
	const Obj* ret = nullptr;
	ret = lambda_5(makeRecord({}), env);
	env->pop();
	return ret;
}
const Obj* lambda_7(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	if (unwrapBool(_eq_(makeRecord({std::make_pair("_0", env->lookup("list")),std::make_pair("_1", makeRecord({}))}), env))) {
		ret = makeInt(0);
	} else {
		ret = _add_(makeRecord({std::make_pair("_0", makeInt(1)),std::make_pair("_1", invoke("size", _get_(env->lookup("list"), "tail", env), env))}), env);
	}
	env->pop();
	return ret;
}
const Obj* size(const Obj* param, Environment *env) {
	env->push();
	env->bind("list", param);
	const Obj* ret = nullptr;
	ret = lambda_7(makeRecord({}), env);
	env->pop();
	return ret;
}
const Obj* lambda_9(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	if (unwrapBool(_eq_(makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_0", env)),std::make_pair("_1", _get_(_get_(env->lookup("tup"), "_1", env), "head", env))}), env))) {
		ret = makeInt(0);
	} else {
		ret = _add_(makeRecord({std::make_pair("_0", makeInt(1)),std::make_pair("_1", invoke("index", makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_0", env)),std::make_pair("_1", _get_(_get_(env->lookup("tup"), "_1", env), "tail", env))}), env))}), env);
	}
	env->pop();
	return ret;
}
const Obj* lambda_10(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	if (unwrapBool(_eq_(makeRecord({std::make_pair("_0", _get_(env->lookup("tup"), "_1", env)),std::make_pair("_1", makeRecord({}))}), env))) {
		ret = makeInt(1);
	} else {
		ret = lambda_9(makeRecord({}), env);
	}
	env->pop();
	return ret;
}
const Obj* index(const Obj* param, Environment *env) {
	env->push();
	env->bind("tup", param);
	const Obj* ret = nullptr;
	ret = lambda_10(makeRecord({}), env);
	env->pop();
	return ret;
}
const Obj* lambda_12(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	if (unwrapBool(_eq_(makeRecord({std::make_pair("_0", _get_(env->lookup("lists"), "_0", env)),std::make_pair("_1", makeRecord({}))}), env))) {
		ret = _get_(env->lookup("lists"), "_1", env);
	} else {
		ret = makeRecord({std::make_pair("head", _get_(_get_(env->lookup("lists"), "_0", env), "head", env)),std::make_pair("tail", invoke("append", makeRecord({std::make_pair("_0", _get_(_get_(env->lookup("lists"), "_0", env), "tail", env)),std::make_pair("_1", _get_(env->lookup("lists"), "_1", env))}), env))});
	}
	env->pop();
	return ret;
}
const Obj* append(const Obj* param, Environment *env) {
	env->push();
	env->bind("lists", param);
	const Obj* ret = nullptr;
	ret = lambda_12(makeRecord({}), env);
	env->pop();
	return ret;
}
const Obj* enter(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	ret = makeInt(0);
	env->pop();
	return ret;
}
const Obj* _main_(const Obj* param, Environment *env) {
	env->push();
	env->bind("_", param);
	const Obj* ret = nullptr;
	env->bind("contains", makeFun(*contains, new Environment(*env)));
	env->bind("push_front", makeFun(*push_front, new Environment(*env)));
	env->bind("push_back", makeFun(*push_back, new Environment(*env)));
	env->bind("remove", makeFun(*remove, new Environment(*env)));
	env->bind("size", makeFun(*size, new Environment(*env)));
	env->bind("index", makeFun(*index, new Environment(*env)));
	env->bind("append", makeFun(*append, new Environment(*env)));
	env->bind("enter", makeFun(*enter, new Environment(*env)));
	ret = invoke("enter", makeRecord({}), env);
	env->pop();
	return ret;
}
void setup() {
	Serial.begin(9600);
	while(!Serial);
	Serial.println(unwrapInt(_main_(makeRecord({}), new Environment())));
}
void loop() {
}
